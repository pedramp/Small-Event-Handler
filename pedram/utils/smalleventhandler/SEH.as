/** *  * Pedram Pourhossein pedramp@gmail.com * Feb 2010 *  * this class is just simple way to manage custom events and transfer custom object and values between event listener and dispatcher *  */package pedram.utils.smalleventhandler{	import flash.events.Event;		public class SEH extends Event	{		// special property container		private var _special:*;		// index of each event		private var _index:uint;				// index counter		private static var _indexCounter:uint = 0;		// store all created event in this property, maybe it's help you some times		private static var _library:Array = [];						/**		 * just SEH constructor method 		 * @param type, type of event		 * @param special, it can help you to transfer any kind of data between event dispatcher and listener 		 * @param bubbles		 * @param cancelable		 */		public function SEH(type:String, special:* = null, bubbles:Boolean=false, cancelable:Boolean=false)		{			this._special = special;			this._index = _indexCounter;			super(type, bubbles, cancelable);			//			_library.push( this );			_indexCounter++;		}				/**		 * you can get your object easily 		 * @return special object		 */		public function get special():*		{			return this._special;		}				/**		 * @return index number of this event		 */		public function get index():uint		{			return this._index;		}				/**		 * get new instance of event very easy, but if you want use it for dispatching, I think "dispatchEvent" method is better for you.		 * @param type type of your event		 * @param special special object you want store in event		 * @param bubbles		 * @param cancelable		 * @return a new instance of SEH class		 */		public static function getNewEvent(type:String, special:* = null, bubbles:Boolean=false, cancelable:Boolean=false):SEH		{			return new SEH(type, special, bubbles, cancelable);		}				/**		 * dispatch your event very easily just with a static method and with one line code.		 * @param type type of your event		 * @param host instance of your dispatcher		 * @param special special object you want store in your event		 */		public static function dispatchEvent(type:String, host:*, special:* = null):void		{			try			{				host.dispatchEvent( getNewEvent(type, special) );			}catch(e:*)			{				trace('Error:', e);			}		}				/**		 * get an event by index number		 * @param i, index of your event		 * @return SEH instance, or null object		 */		public static function getEventByIndex(i:uint):SEH		{			for(var j:uint=0; j<_library.length; ++j)			{				if((_library[j] as SEH).index == i)					return _library[j] as SEH;			}						return null;		}				/**		 * how many events do you have 		 * @return length of your container 		 */		public static function get length():uint		{			return _indexCounter;		}				/**		 * get events in a list with same type		 * @param type type of your events		 * @return list of events		 */		public static function getEventsByType(type:String):Array		{			var a:Array = [];						for(var j:uint=0; j<_library.length; ++j)			{				if((_library[j] as SEH).type == type)				{					a.push( _library[j] ); 				}			}						return a;		}	}}